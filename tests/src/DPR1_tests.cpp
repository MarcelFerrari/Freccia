#ifndef _COLORS_
#define _COLORS_

/* FOREGROUND */
#define RST "\x1B[0m"
#define KRED "\x1B[31m"
#define KGRN "\x1B[32m"
#define KYEL "\x1B[33m"
#define KBLU "\x1B[34m"
#define KMAG "\x1B[35m"
#define KCYN "\x1B[36m"
#define KWHT "\x1B[37m"

#define FRED(x) KRED x RST
#define FGRN(x) KGRN x RST
#define FYEL(x) KYEL x RST
#define FBLU(x) KBLU x RST
#define FMAG(x) KMAG x RST
#define FCYN(x) KCYN x RST
#define FWHT(x) KWHT x RST

#define BOLD(x) "\x1B[1m" x RST
#define UNDL(x) "\x1B[4m" x RST

#endif /* _COLORS_ */

#define PASS 1e-7

// Include standard libraries
#include <iostream>

#include <string>

// Include eigen
#include <Eigen/Dense>

// Include custom libraries
#include "Freccia/All.hpp"

int test_input(unsigned int t, Eigen::ArrayXd & D, Eigen::ArrayXd & z, double rho = 1.0, Freccia::Options::DPR1EigenSolverOptions opt = Freccia::Options::DPR1EigenSolverOptions()) {

  std::cout << KYEL << "Running DPR1 test " << t << "..." << RST << std::endl;

  Eigen::MatrixXd A = D.matrix().asDiagonal();
  A += rho * z.matrix() * z.matrix().transpose();

  Freccia::DPR1::DPR1EigenSolver solver(D, z, rho, opt);

  double err = (A - solver.eigenvectors() * solver.eigenvalues().asDiagonal() * solver.eigenvectors().transpose()).norm();
  double orth = (solver.eigenvectors().transpose() * solver.eigenvectors() - Eigen::MatrixXd::Identity(D.size(), D.size())).norm();

  if (err < PASS && orth < PASS) {
    std::cout << BOLD(FGRN("PASSED: "));
  } else {
    std::cout << BOLD(FRED("FAILED: "));
  }

  std::cout << std::endl;
  std::cout << "||A - QDQ^T||_F = " << err << std::endl;
  std::cout << "||Q^TQ - I||_F = " << orth << std::endl;

  return err > PASS;
}

int test1() {
  Eigen::ArrayXd D(6);
  D << 1e10, 5.0, 4e-3, 0.0, -4e-3, -5.0;

  Eigen::ArrayXd z(6);
  z << 1e10, 1.0, 1.0, 1e-7, 1.0, 1.0;

  return test_input(1, D, z);
}

int test2() {
  double eps = std::numeric_limits < double > ::epsilon();

  Eigen::ArrayXd D(4);
  D << 1 + 40 * eps, 1 + 30 * eps, 1 + 20 * eps, 1 + 10 * eps;

  Eigen::ArrayXd z(4);
  z << 1.0, 2.0, 2.0, 1.0;

  return test_input(2, D, z);
}

int test3() {
  Eigen::ArrayXd D(4);
  D << 10. / 3., 2. + 1e-7, 2. - 1e-7, 1.;

  Eigen::ArrayXd z(4);
  z << 2., 1e-7, 1e-7, 2.;

  Freccia::Options::DPR1EigenSolverOptions opt;
  opt.ABS_ZERO_TOL = 1e-15;

  return test_input(3, D, z, 1.0, opt);
}

// Helper function to generate inputs for tests 4, 5, and 6
void generate_input(const double beta, Eigen::ArrayXd & D, Eigen::ArrayXd & z) {
  D(0) = 1.0;
  z(0) = 2.0;

  for (int n = 1; n <= 100; n++) {
    D(2 * n - 1) = 2.0 + n * beta;
    D(2 * n) = 2.0 - n * beta;

    z(2 * n - 1) = beta;
    z(2 * n) = beta;
  }
  D(201) = 10.0 / 3.0;
  z(201) = 2.0;
}

int test4() {
  const double beta = 1e-3;
  Eigen::ArrayXd D(202);
  Eigen::ArrayXd z(202);
  generate_input(beta, D, z);
  return test_input(4, D, z);
}

int test5() {
  const double beta = 1e-8;
  Eigen::ArrayXd D(202);
  Eigen::ArrayXd z(202);
  generate_input(beta, D, z);
  return test_input(5, D, z);
}

int test6() {
  const double beta = 1e-15;
  Eigen::ArrayXd D(202);
  Eigen::ArrayXd z(202);
  generate_input(beta, D, z);
  return test_input(6, D, z);
}

int test7() {
  Eigen::ArrayXd D(1);
  D << 1.0;

  Eigen::ArrayXd z(1);
  z << 1.0;

  return test_input(7, D, z);

}

int test8() {
  Eigen::ArrayXd D(1);
  D << 1.0;

  Eigen::ArrayXd z(1);
  z << 0.0;

  return test_input(8, D, z);

}

int test9() {
  Eigen::ArrayXd D(2);
  D << 1.0, 1.0;

  Eigen::ArrayXd z(2);
  z << 2.0, 2.0;

  return test_input(9, D, z);

}

int test10() {
  Eigen::ArrayXd D(2);
  D << 1.0, 1.0;

  Eigen::ArrayXd z(2);
  z << 0.0, 0.0;

  return test_input(10, D, z);
}

int test11() {
  Eigen::ArrayXd D = Eigen::VectorXd::Ones(10);

  Eigen::ArrayXd z = Eigen::VectorXd::Ones(10);

  return test_input(11, D, z);
}

int test12() {
  Eigen::ArrayXd D(3);
  D << 2.26443, -1.85832, -2;

  Eigen::ArrayXd z(3);
  z << -0.889837, 0.456279, -1;

  return test_input(12, D, z);
}

int test13() {
  // Test based on real world instanton tunneling problem
  Eigen::ArrayXd D(54); // Create an array of 54 elements
  D << -9.99999999999999777955395074968692e-01,
    -1.00000000000000088817841970012523e+00,
    -1.00000000000000088817841970012523e+00,
    -1.00000000000000066613381477509392e+00,
    -1.00000000000000022204460492503131e+00,
    6.18033988749892015945874845783692e-01,
    -1.00000000000000000000000000000000e+00,
    -1.00000000000000000000000000000000e+00,
    -9.99999999999999888977697537484346e-01,
    6.18033988749894791503436408675043e-01,
    -1.00000000000000000000000000000000e+00,
    -1.00000000000000000000000000000000e+00,
    -1.00000000000000000000000000000000e+00,
    -9.99999999999999777955395074968692e-01,
    -9.99999999999999777955395074968692e-01,
    6.18033951290103633624539725133218e-01,
    -9.99999999999999666933092612453038e-01,
    -9.99999999999999888977697537484346e-01,
    -9.99999999999999111821580299874768e-01,
    6.18033985290270981849403142405208e-01,
    6.18033988749896123771065958862891e-01,
    6.18033988749900120573954609426437e-01,
    6.18033988749895457637251183768967e-01,
    6.18033988749897345016393046535086e-01,
    6.18033988749895457637251183768967e-01,
    6.18033988767809794317997784673935e-01,
    6.27583472434484757052075565297855e-01,
    -1.61440781202711525210702347976621e+00,
    -1.61803398824512467690794892405393e+00,
    -1.61803398874989445843652902112808e+00,
    -1.61803398874989445843652902112808e+00,
    -1.61803398874989468048113394615939e+00,
    -1.61803398874989490252573887119070e+00,
    -1.61803398874989512457034379622201e+00,
    -1.61803398874989490252573887119070e+00,
    -1.61803398874989556865955364628462e+00,
    -1.61803400448347667328619081672514e+00,
    -1.61803398875227166797685640631244e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000e+00,
    -2.00000000000000000000000000000000;

  Eigen::ArrayXd z(54); // Create an array of 54 elements
  z << 1.13034847467218230177010696024809e-01,
    -1.08830906014430683903526642097859e-01,
    -2.19915834519469555186077514008502e-01,
    -5.57657192170161075672751849197084e-01,
    4.91138376492307980603069239577962e-03,
    -1.61608200449620863299732425096967e-15,
    8.51031875907929113989069946910604e-02,
    3.31001801956051000530578676261939e-01,
    -9.93843256647445163001752810316702e-04,
    -3.01196263102800592007769546382250e-16,
    8.16633150110570443791502270869387e-03,
    1.82655433445364501210406160680577e-01,
    6.19401136168299171202988873119466e-01,
    5.07899410296292277977592277693475e-02,
    -2.29396656723432929014805381484621e-01,
    8.89504048878306722258964593723048e-10,
    3.34081710780673307725763265807473e-02,
    -1.55036822568323989779415228440484e-01,
    -4.19780151609530569056794035986968e-02,
    1.72966932858784260674762604634871e-11,
    6.10456256447142204603658742529178e-16,
    2.58682340679737132778462230490580e-15,
    -7.05056117404207606025862638894697e-17,
    3.59999557634849178016340197499861e-16,
    -3.67810035957991548009228019144230e-16,
    2.55082577149257803439676729708312e-13,
    4.64362291996963452813177147121548e-07,
    7.55788080045928128290397534500000e-07,
    -1.05832993514712929660217568045484e-11,
    1.05292354798525369594866305497781e-15,
    4.42388585910245974173586706706348e-16,
    -5.57972573798507848637780389244469e-16,
    -1.91863344131719009401850768152927e-16,
    7.24483664113478875366163327687702e-17,
    -4.06301998351188312922656920425669e-16,
    -1.28769367422195236086444726654248e-15,
    -1.59042329055111130478311812474481e-09,
    -1.41771970866162404640685462428244e-13,
    1.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000e+00,
    0.00000000000000000000000000000000;

  // This is an ill-conditioned problem 
  // so we need to tweak the tolerances
  Freccia::Options::DPR1EigenSolverOptions opt;
  opt.REL_ZERO_TOL = 1e-7; // Increase relative zero tolerance

  return test_input(13, D, z, 1.0, opt);
}

int test14() {
  // Test based on real world instanton tunneling problem
  Eigen::ArrayXd D(287); // Create an array of 54 elements
  D << 2412.2968805182736105052754282951,
2382.7750779841890107491053640842,
2378.3180339362279482884332537651,
2315.1955477037008677143603563309,
2270.2225427075004517973866313696,
2261.2072846940768613421823829412,
2243.9566161514085251837968826294,
2228.6865143699669715715572237968,
2222.4959125590303301578387618065,
2171.6643579024748760275542736053,
2158.4543806335514091188088059425,
2141.9036055935725926246959716082,
2137.1320161236044441466219723225,
2129.8867729983703611651435494423,
2058.4980602585842461849097162485,
2039.9184196387072915968019515276,
2035.1508966663800492824520915747,
2005.0509486612068030808586627245,
1955.8293048057678333861986175179,
1940.0223574346437089843675494194,
1915.1010767921964088600361719728,
1838.3685512173501592769753187895,
1786.3747847085328430694062262774,
1772.4073554077406242868164554238,
1761.8313358369850902818143367767,
1757.940075102495711689698509872,
1737.7949022727352712536230683327,
1710.2008223644463669188553467393,
1683.7142731122933128062868490815,
1648.3734350715069467696594074368,
1597.1647396267949261527974158525,
1590.6682358877999377000378444791,
1558.262485129939250327879562974,
1557.9808935214743996766628697515,
1527.2959834766620588197838515043,
1476.5711216847912510274909436703,
1466.8713524902361768909031525254,
1457.4645642916973429237259551883,
1444.8199750176809175172820687294,
1419.5105397915906451089540496469,
1388.3589244592994873528368771076,
1387.0108511955436370044481009245,
1347.5234448553844686102820560336,
1345.7395121621655107446713373065,
1340.8204014463126441114582121372,
1322.8555688264884793170494958758,
1275.0209299830944473796989768744,
1231.3487701235178519709734246135,
1230.6389935598731426580343395472,
1201.7661322813332844816613942385,
1193.2225075042631488031474873424,
1191.4291757919625069916946813464,
1189.8466267173907908727414906025,
1177.3027203681804166990332305431,
1170.8205764804379214183427393436,
1169.3766037369100558862555772066,
1127.7646738309886131901293992996,
1101.2718468450216278142761439085,
1062.5919122285042703879298642278,
1056.655615137613722254172898829,
1053.5012367377055397810181602836,
1031.7968553105520186363719403744,
1015.4673728881707575055770576,
1014.3480298068641332065453752875,
1008.1531408399604288206319324672,
998.10207246906304590083891525865,
990.70064494749817640695255249739,
984.16488738560019555734470486641,
979.74008850361065015022177249193,
974.37773651410805086925392970443,
967.92666435126932356070028617978,
940.99662435454274600488133728504,
921.74635655541055712092202156782,
906.7692324054870596228283829987,
903.22135878898382088664220646024,
898.80904880938771839282708242536,
862.20825359111370289610931649804,
857.19261920448923319781897589564,
845.47478556157363982492825016379,
832.44113099483320183935575187206,
823.49108697452220440027303993702,
823.25213873765892458322923630476,
814.63168461722023039328632876277,
797.4586747916425792936934158206,
794.66415586159519079956226050854,
792.45465388529180472687585279346,
789.98636743251643110852455720305,
773.56186946850505137263098731637,
763.85998983081822188978549093008,
761.55588179149981442606076598167,
759.37947327525682794657768681645,
755.45941865382428659358993172646,
748.52052653764621936716139316559,
745.69052858794168514577904716134,
722.48805192181725942646153271198,
699.17437490656288900936488062143,
693.21806014179196608893107622862,
674.23321485139024389354744926095,
668.43539601065140232094563543797,
667.793205886119721981231123209,
665.7993708331766811170382425189,
658.91888469905666170234326273203,
654.48988917528595266048796474934,
649.26210919186246428580489009619,
609.59725431578385723696555942297,
600.28549759392831219884101301432,
589.04124128101750557107152417302,
583.80292213044663185428362339735,
580.86160418076622136140940710902,
579.77528215114580234512686729431,
576.47950565148039459018036723137,
570.34584581773344780231127515435,
567.35567905743789651751285418868,
566.43068003667053744720760732889,
564.58701202381303119182121008635,
563.11888010775373913929797708988,
553.79491811908349063742207363248,
546.84891670814442932169185951352,
540.5063736260162841062992811203,
534.80492108968587672279682010412,
507.64399569183768790026078931987,
504.38804773715793317023781128228,
478.37049025210939134922227822244,
470.18350050224216829519718885422,
468.02795115740718756569549441338,
467.94852343720282306094304658473,
461.40494716609549641361809335649,
452.09295617112252330116461962461,
442.09498069479633386436034925282,
432.12671092521469518032972700894,
423.51300220677393326695892028511,
419.52320508513383856552536599338,
418.34597348772041414122213609517,
401.64704595871347692082053981721,
397.44324757820726290447055362165,
391.79884339280727090226719155908,
387.95892785949649805843364447355,
383.89176803057904407978639937937,
382.52289437705815089429961517453,
367.52150289840608365921070799232,
366.81511498449822283873800188303,
362.14755826605539823503931984305,
357.5197606795074989349814131856,
351.08244241201532531704287976027,
349.7358822052569280458556022495,
344.65606922733491046528797596693,
343.52253618661160317060421220958,
338.33064187592708549345843493938,
335.18069971246279692422831431031,
317.70933796860538222972536459565,
314.6565244573818631579342763871,
314.51370249506948084672330878675,
311.14312040057859576336340978742,
306.41686277112421521451324224472,
297.16498511862801024108193814754,
296.16882532244727599390898831189,
292.02493485953613117089844308794,
285.23513431278416874192771501839,
274.8488364164024915226036682725,
274.53021565556861105505959130824,
274.42083533009764551025000400841,
273.60686566331418134723207913339,
269.8995622254690260888310149312,
269.42774879027689394206390716136,
268.5354861229149605605925898999,
249.75619211409878062113421037793,
249.60919465499668490338081028312,
249.43270729324353851552587002516,
246.94485870011405381774238776416,
236.09132515753705661154526751488,
234.0332275009330373904958833009,
228.51836480196536172115884255618,
220.2379938577515474662504857406,
219.72867040838926300239108968526,
218.37783671312064370795269496739,
217.96975351033236734110687393695,
216.86724753002491183906386140734,
213.94252139242277621633547823876,
210.84088740710586762361344881356,
206.64876834241405845205008517951,
205.0845372872070697667368222028,
202.26824149737316815844678785652,
200.44273445243601372567354701459,
187.24624813565137060322740580887,
180.81641910776937720584101043642,
173.47396929802894760541676077992,
172.98750294437567731620220001787,
172.23701840830801756965229287744,
165.52155969511753141887311358005,
164.81659606371894710719061549753,
164.78632027488433209327922668308,
161.68968794724148096975113730878,
160.03294542597373606440669391304,
157.01574421493140221173234749585,
152.47435956824796221553697250783,
149.11466678091838389264012221247,
144.42799443239852053011418320239,
144.2971541438895712872181320563,
142.70491869912379456764028873295,
137.33453044618232752327458001673,
136.930983325754169754873146303,
125.49012702338968949788977624848,
124.51846323070344624284189194441,
121.15095911553578389430185779929,
119.06625216283229917735297931358,
108.91053608908914895891939522699,
102.91880005115751828270731493831,
98.893669551300902753609989304096,
98.435166794196618411660892888904,
98.362594723486381553811952471733,
96.189512453026253524512867443264,
96.130023729945264676644001156092,
89.172377961466224860487272962928,
87.906295632036616893856262322515,
86.68978152245887258686707355082,
84.473989118445345525287848431617,
82.351837292804106027688249014318,
81.704523983350910043554904405028,
75.584380955074095709278481081128,
73.609948720196030080842319875956,
71.071722703726351255681947804987,
64.167965052704786899084865581244,
64.104183129075607894264976494014,
62.329882981899068283837550552562,
61.863843294420838958558306330815,
59.96466199199765156890862272121,
59.45814690113687106531870085746,
57.796705968427588118174753617495,
55.010948934042282587597583187744,
46.27144127252083904977553174831,
45.84969918247780640285782283172,
43.504160966303658142351196147501,
41.277902386552163704891427187249,
39.764569263645782370986125897616,
39.628154599532663837635482195765,
36.923193529230275089503265917301,
36.374218296387020643578580347821,
36.345096175390160908591496990994,
34.744824836109572174791537690908,
32.357337057649040445994614856318,
29.047329916364386548366383067332,
23.748075348302005949108206550591,
23.26451512200605975522194057703,
23.181839925293548532181375776418,
21.895396389756580646235306630842,
21.315894651978698703942427528091,
19.920068127829015480756424949504,
17.885085922679746062158301356249,
16.803910691949848654758170596324,
16.780557739670690864386415341869,
16.719405620915289034655870636925,
16.552366312589317232095709186979,
14.435225581803438288375218689907,
13.439414056805924602144841628615,
13.043351063836926329031484783627,
11.651101513013383481620621751063,
9.6520087233842239982095634331927,
9.4424368554527795538433565525338,
9.2510688965141998352237351355143,
8.9310545857427712235221406444907,
6.5947031037404642006549693178385,
6.1941878259945299944888574827928,
5.9008844884237667827164841582999,
5.5033524776877333906099920568522,
4.1360783028084249224320956273004,
4.0492680881100984180420709890313,
3.8499810997663428402404406369897,
3.1323640533065386648559069726616,
3.1294500305527517269865711568855,
2.1069557413993367234184006520081,
1.9177555438984119628997859763331,
1.7208689457768187036634799369494,
1.4265363430365036734315253852401,
1.1977285344978532144466498721158,
1.0949330653710231953112952396623,
0.96237288008225740920664748045965,
0.74409929558253007364498898823513,
0.34549286687978203458371240230917,
0.30230508493713370565814102519653,
0.21328957469555612225242668955616,
0.19079147058818743398767026064888,
0.18214060667128847970097638153675,
0.054605217781475937077750870685122,
-0.066057868694536323039834257997427,
-0.25168795942611033034097545169061,
-0.49686317662571244380131929574418,
-0.8458860359499602576960342048551;

  Eigen::ArrayXd z(287); // Create an array of 54 elements
  z << 0.099093127705572423002955417814519,
-1.3217303793795847433529293531791e-09,
-1.0468531318426647016105852060208e-07,
5.4756373841921234771508431027343e-05,
0.00038605022218270531762437935974219,
2.5524945182861403680416815392684e-07,
0.0048729569326183439989530477021162,
1.1575903615524625197231233953214e-14,
9.3315336582078715360059594234772e-10,
-4.2206788212200005575062627542464e-13,
-0.22189873555788336423333362290577,
-3.387287273004276281322971888188e-11,
-7.5626549678973657433292068202506e-13,
-5.630950688365749469559542726853e-13,
0.00031031558181597465682216574478502,
-0.16905367185963396381431778081605,
6.6114022386058290466829171047776e-09,
0.0001918172854975031308387423134576,
-9.3495514047256875661454312457317e-14,
-1.315800715276837628936106972899e-09,
1.5401837090676907168935260978603e-12,
-8.8789112255742103901049377609467e-07,
-9.1614652681767103223074212060839e-09,
-9.7524668199438007760082233743582e-07,
-8.2340368138186685716713613914293e-14,
-7.53038250516862462559014311174e-13,
-0.059424764151749923102308059696952,
-0.00077711413486542229699799433362273,
-1.9862957876450334983396460503398e-14,
-2.835453240513678930097674715904e-14,
-0.15121714122674687064140641723498,
-1.019474070402553999447779406462e-06,
-8.1250225325912100950210416075675e-10,
-4.6181976458700142893456627095176e-09,
8.7186298766548166516702598536245e-15,
0.0002194025666579370152393241300004,
2.4936937995669526105160102025238e-06,
-0.00059003989243845841265040386147689,
-6.1157067810224162219131396433895e-09,
-2.6698388666819565970027866238849e-12,
-0.029382413386262726251452193082514,
-5.4143693723995333671401046507434e-10,
-2.9133008968636088271713119411449e-12,
-1.5154582915018974061571906120083e-05,
0.00062117617655014199535418173425683,
0.47386317127797084047813314100495,
3.0540781895437897359296686161656e-06,
5.2532386260583418592130799940065e-05,
0.060200442273956093763853658629159,
4.4330440541154047520040004693134e-11,
1.6396267971035994913891012771142e-13,
3.4542689040715024668335960192356e-08,
2.1003313205166989072333445025408e-13,
0.00039332638363027099112287365834106,
1.3710999378137321648036177511765e-09,
1.9528554259771430865694752512579e-09,
-5.4566871440372112446633157123443e-05,
-2.8499016469126987616308831308183e-13,
-2.656933543282340490668451108308e-11,
8.2982465801596712954958519804324e-12,
1.2511679107869918522884494348907e-07,
-1.3666232746134877827355429136258e-05,
-0.18938216149494596640678878429753,
-5.301880547300384470341133450258e-08,
-5.2620369997888159756992114063329e-14,
-1.0734769343855345004857598171632e-08,
0.090810775108466232352633085156413,
1.3982877581448621345964189440567e-15,
-4.0374409047277580105556498630486e-14,
-0.064475441370139302543762482855527,
-2.8428471002812893614030262995464e-13,
-0.00027059055656264695841409229082331,
1.9582223423934589311666554234392e-05,
1.4750689770480440074067749259279e-06,
0.0010090884653396815003739694915907,
1.1918497310033556448591571135358e-11,
0.00041342752623754628000032895762672,
3.7049544499879411369242478850366e-10,
3.5009969158283535716061595012322e-11,
-1.0811562339905499952367846218755e-12,
9.7326989329855334802642855966465e-13,
-0.058223023989870087424591815761232,
-2.3106089906189237741205198938547e-10,
-1.14326017454796580588365699908e-12,
-0.00097303827094080686237881350209022,
5.9804032090104502195562260612616e-09,
-1.4526212678144712171045562673719e-11,
-7.7037914716326437409655084054272e-06,
-1.3882707373356504832660495164003e-11,
-2.9534837825842939501337099496639e-08,
-0.15047767383381757677618395518948,
-1.7911064924782482027814526109688e-12,
0.31294629493036968392871699506941,
-1.6420578586444052887926604595431e-07,
-1.113127490453277447290539898942e-09,
-0.0014364641691428129636337596153339,
-1.9853577571084209697359099015513e-13,
2.1258921567105552451656745143312e-10,
-0.00010193206758338963521890591090724,
3.6563536901007090270602616771667e-06,
-0.0029811077143010043973003764250507,
3.8475866937665924598426187194824e-14,
0.00021541215964433077186858389584501,
-0.27427245296735258683895608555758,
-0.016048833293639871294677945456897,
-1.2013008046854467965021753816934e-05,
6.6615734839036100256733606561621e-07,
0.0023380001134254862517336537308665,
0.00035600262901078693570516842115126,
-1.9178888180829404144262709435867e-11,
0.0032254008982448402823028921204696,
3.0531247439933313452331634539743e-11,
1.3419948438632868810094992805676e-08,
0.077278306978478983335634211471188,
6.2686700156217955784932444810678e-12,
4.0435943845086676245458778757459e-09,
7.405981689064424346256171327596e-07,
3.155475840251654547035325214323e-14,
0.42199259897989377376958941567864,
5.6237714284604803979331567482311e-13,
3.0496195900168930853317561524563e-05,
1.581490915371831904873640658664e-11,
6.113629701241912860715002858529e-10,
5.6026561776019169770069036293214e-07,
7.0669674066281443718497493056141e-06,
-5.1047221555036271332514231199497e-13,
-1.4721088130945693493622014732733e-08,
-0.0027811006806635696700369386746843,
-5.604574109867444960986122612978e-12,
-0.00073336574667522505012462463724887,
-5.5707289725078773762298402585981e-14,
2.444587943555975754832913088288e-06,
0.074862568122083111843423353093385,
-2.127935639498597025531901935399e-12,
1.1705596758856858135032121936547e-08,
-4.0780030613485146717295010566212e-08,
0.019113525248418000712646858119115,
1.9203149672719904544157139316902e-11,
-0.0016768455382490294897773752680337,
-2.0912786011653271712323887143725e-05,
4.1753220829009219481763211245795e-06,
2.0337965630470182033014830969009e-07,
-9.3603437400134677098037217775725e-15,
-1.4849239853188683755307459116946e-15,
-5.5316142639268396096158917546193e-14,
-1.06201620469493989406124497335e-09,
-0.15567200102921574522696346321027,
-0.049592633031276887878302517265183,
-2.3300506331757253521835826504116e-05,
1.3594734261841964604373699801498e-13,
3.1876058601352224415487630069035e-08,
0.0003148657579631750275984958253872,
8.4370472254653418988896661835358e-12,
2.998248328783313302879589841766e-13,
2.0012360510583635219273543641091e-09,
4.6651950616582269465200958816599e-10,
7.7074927840054239548944065019143e-06,
-0.00010224244697210102918779467406907,
-1.3154933212521853786979656789987e-14,
-8.1272220158432720879364274946255e-05,
-7.8336846538316911930953880246812e-14,
-5.9870426806656681002292406109462e-11,
-1.7552202052881951508689813157022e-09,
1.8215595224633034113652293181987e-08,
6.6622720904238833229806126157331e-09,
-1.4302789287462002563327580217933e-05,
5.6284170449358571853004656360079e-12,
0.3564214807506212445709081748646,
-1.5283697901968227793350449178808e-11,
6.6490521726832791801970520134679e-07,
1.6596005086989914465516010488497e-10,
6.0946855314456225844853970441406e-05,
0.30417340181987989611300804426719,
0.048555395029284048602491452584218,
-4.8837121127236755404295754621707e-11,
-0.094508663037061471645650101436331,
-1.5088503698898581037487446729007e-12,
-3.4431874305547332155118468030876e-15,
-1.2548351772908724016501735842866e-05,
-4.9899704232405953081521581340962e-07,
-5.4838970207015748250741377393599e-08,
-0.18554977918684290028039640674251,
-1.5271470842043003387326264195056e-12,
-0.052894606942006178185167186711624,
-3.809317506258236283838282225378e-07,
-0.0010734547435148670234406065304711,
-0.004699270894412123540651027298054,
1.4496832323955711401158589719657e-11,
2.6442595214948366096519613810097e-10,
-3.1907830366294318142360612270553e-08,
1.131552343000357706219896982737e-07,
0.14119976476337856019505068161379,
-0.37430210487048409806476456651581,
0.006138371933518063303103495798041,
-1.5387154063315445941801274699662e-14,
6.3242472852575081556136437632845e-11,
1.6631407165138133520902796445195e-10,
2.5741882136198552168770107987164e-08,
-4.9538425693850055833364343094161e-05,
8.0450598302085593194673136243841e-09,
-2.7240098836930209142090397213265e-09,
-5.3853947978708707915499430407547e-06,
3.7810783706645090709152106868399e-12,
0.2511344523268229655954542067775,
3.0547147134932309716859414479638e-12,
-4.7605498494169074010396545034023e-13,
-5.7753924418817399199263355746847e-06,
-3.641233533519122101221902133893e-09,
-0.00011902926571036175518603777989668,
-1.2858197710917345006037984891413e-10,
3.6239937095922144095865025104075e-05,
4.4189813258615757811387236841938e-05,
-6.9461816548306874254393227592803e-10,
-4.5618173413073685332978483400647e-11,
-4.9464701396410333261455585910632e-13,
-0.00052262475406833020039748527452161,
-1.0375388491192476164993223423363e-09,
-0.00038250422020863299437526405810672,
-0.33966333664791853452769032628566,
-0.060631581997195031774605666896605,
-9.0590183670315121439418372655678e-08,
0.0026409740306048219878054528209077,
-7.6721611114093055463049304856896e-13,
-7.6299736126900569801648103557902e-12,
2.9526876382654585638622821608563e-08,
-1.531111428519529986401793522654e-09,
-0.23404990230799549433271522502764,
-1.0549047784130971452520170172917e-07,
-1.4241763783042785092232450708249e-06,
-0.016034061877620707503577790475902,
-0.0032863813331161025217685978105919,
-9.5957275756819657695252667739538e-06,
-0.18975343485205872773313728885114,
-8.0521281277006253882009103369638e-08,
-0.00019822701677314912460832474483396,
-1.7537153135522601888956692461896e-05,
-2.318119614226957940119472091476e-10,
-2.6724215292708974403972188951285e-08,
-2.7512005483731797753111050666534e-08,
0.00041460823334547126711377429408856,
-6.42131189117382823618632278935e-08,
9.3127183329739513192026095322033e-11,
0.086382916830609585145950291007466,
-0.00018785028773805629437321229602276,
0.00010328442745101880384257092559963,
0.0074821889334802712395733337302772,
1.0740394590863527695572256725164e-08,
-2.0486179892935563699399125395088e-10,
-3.2970117192172232099717671957931e-08,
-5.6866580412742946985197450837646e-05,
0.11643427826745320063928090803529,
4.3644910298801149851960244966092e-10,
0.0026750598282355305367052888954049,
0.018037480092883473314913089780021,
1.1591123304881151978443579175782e-05,
0.00011299354228080281609472579340547,
0.25770806506693899606830200355034,
4.5369205505531132893324783306177e-07,
4.3680509733880365699692301280355e-07,
8.9043741676946449714586230908542e-07,
2.2391967069372841114003455848837e-08,
0.0030292648878180380989100228816824,
0.0014237813663094467993980307696233,
9.1128753906199243143661031189146e-09,
5.9478498451345023862119401614201e-06,
0.014370457277899038525670327715034,
1.7780039215652015970915711395861e-05,
3.2052934625112624797416138733297e-05,
0.23930103010580752731506493091729,
-0.0029274922023613215646409280168427,
-1.3113278044014678086807111634382e-05,
1.5420502656276989828122844436442e-06,
-4.0406830802900900521772153961564e-05,
0.00035481609912470040389675940417646,
0.001332416623496326729333971705671,
-4.392028954910804451399961023661e-05,
5.0867993895938890534010740074322e-05,
0.00010841421978805233707499749984393,
0.00026819680728698590873454454808211,
0.069969755074533832028826907389885,
0.020742467181276140475443270361211,
-0.00012639053476263070350735229219197,
0.0014406410910246109091659150180931,
1.6027920264406729256587494369946e-05,
-0.00019950478224371539256835894615705,
4.2472722042482682639689788028914e-08,
-0.58347012756909510944325347736594;

  // This is an ill-conditioned problem 
  // so we need to tweak the tolerances
  Freccia::Options::DPR1EigenSolverOptions opt;
  opt.ABS_ZERO_TOL = 1e-10; // Increase absolute zero tolerance
  //opt.REL_ZERO_TOL = 1e-7; // Increase relative zero tolerance

  return test_input(14, D, z, 1.0, opt);
}


int main(int argc, char ** argv) {
  int rax = 0;

  rax |= test1();
  rax |= test2();
  rax |= test3();
  rax |= test4();
  rax |= test5();
  rax |= test6();
  rax |= test7();
  rax |= test8();
  rax |= test9();
  rax |= test10();
  rax |= test11();
  rax |= test12();
  rax |= test13();
  rax |= test14();

  return rax;
}